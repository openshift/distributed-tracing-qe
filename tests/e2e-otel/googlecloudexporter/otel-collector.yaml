apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: chainsaw-googlecloudexporter-role
rules:
  - apiGroups: [""]
    resources: ["pods", "namespaces", "nodes"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["apps"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: chainsaw-googlecloudexporter-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: chainsaw-googlecloudexporter-role
subjects:
- kind: ServiceAccount
  name: chainsaw-googlecloudexporter-sa
  namespace: chainsaw-googlecloudexporter

---
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: googlecloudexporter
  namespace: chainsaw-googlecloudexporter
spec:
  image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.132.0
  serviceAccount: chainsaw-googlecloudexporter-sa
  # Mount the Google WIF credential file and expose the credential path as env var
  env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: "/etc/workload-identity/credential-configuration.json"
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName

  volumeMounts:
    - name: service-account-token-volume
      mountPath: "/var/run/secrets/otel/serviceaccount"
      readOnly: true
    - name: workload-identity-credential-configuration
      mountPath: "/etc/workload-identity"
      readOnly: true

  volumes:
    - name: service-account-token-volume
      projected:
        sources:
        - serviceAccountToken:
            audience: "openshift"
            expirationSeconds: 3600
            path: token
    - name: workload-identity-credential-configuration
      configMap:
        name: gcp-wif-credentials

  config:
    exporters:
      debug:
        verbosity: detailed
      googlecloud:
        project: openshift-qe
        trace:
          endpoint: cloudtrace.googleapis.com:443
        metric:
          endpoint: monitoring.googleapis.com:443
          # Removed prefix to avoid permission issues with custom metric descriptors
          # prefix: opentelemetry.io
          resource_filters:
            - prefix: "k8s."
            - prefix: "service."
        log:
          endpoint: logging.googleapis.com:443
          default_log_name: opentelemetry.io/collector-exported-log

    extensions:
      health_check:
        endpoint: "0.0.0.0:13133"

    processors:
      resourcedetection:
        detectors: [gcp, k8snode, env]
        timeout: 10s

      k8sattributes:
        extract:
          metadata:
          - k8s.namespace.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.daemonset.name
          - k8s.cronjob.name
          - k8s.job.name
          - k8s.node.name
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.pod.start_time
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection

      memory_limiter:
        check_interval: 1s
        limit_percentage: 65
        spike_limit_percentage: 20

      batch:
        send_batch_max_size: 50
        send_batch_size: 50
        timeout: 10s

      batch/metrics:
        send_batch_max_size: 1
        send_batch_size: 1
        timeout: 100ms

      # Transform processor to avoid attribute conflicts
      transform/gcp_compatibility:
        trace_statements:
        - context: span
          statements:
          - set(attributes["otel.service.name"], attributes["service.name"])
          - delete_key(attributes, "service.name") where attributes["service.name"] != nil
        metric_statements:
        - context: datapoint
          statements:
          - set(attributes["exported_service"], attributes["service"])
          - delete_key(attributes, "service") where attributes["service"] != nil
        log_statements:
        - context: log
          statements:
          - set(attributes["exported_service"], attributes["service"])
          - delete_key(attributes, "service") where attributes["service"] != nil

    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

    service:
      extensions:
      - health_check
      pipelines:
        traces:
          receivers:
          - otlp
          processors:
          - memory_limiter
          - resourcedetection
          - k8sattributes
          - transform/gcp_compatibility
          - batch
          exporters:
          - googlecloud
          - debug
        metrics:
          receivers:
          - otlp
          processors:
          - memory_limiter
          - resourcedetection
          - k8sattributes
          - transform/gcp_compatibility
          - batch/metrics
          exporters:
          - googlecloud
          - debug
        logs:
          receivers:
          - otlp
          processors:
          - memory_limiter
          - resourcedetection
          - k8sattributes
          - transform/gcp_compatibility
          - batch
          exporters:
          - googlecloud
          - debug