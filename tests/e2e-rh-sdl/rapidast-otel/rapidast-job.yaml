apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rapidast-pvc
  namespace: rapidast-otel
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeMode: Filesystem

---
apiVersion: batch/v1
kind: Job
metadata:
  name: rapidast-job
  namespace: rapidast-otel
spec:
  backoffLimit: 0
  completionMode: NonIndexed
  completions: 1
  parallelism: 1
  suspend: false
  template:
    metadata:
      labels:
        job-name: rapidast-job
      name: rapidast-job
    spec:
      serviceAccount: privileged-sa
      serviceAccountName: privileged-sa
      containers:
      - command:
        - sh
        - -c
        - |
          # Run rapidast and process results
          rapidast.py --log-level debug --config /helm/config/rapidastconfig.yaml
          
          # Process JSON report
          report=$(find /opt/rapidast/results/ -name zap-report.json -exec cat {} \;)
          echo $report
          high_count=$(echo "$report" | grep -o '"riskdesc":.*High' | wc -l)
          medium_count=$(echo "$report" | grep -o '"riskdesc":.*Medium' | wc -l)
          
          # Process SARIF report if available
          sarif_report=$(find /opt/rapidast/results/ -name "*.sarif" -exec cat {} \; 2>/dev/null || echo "")
          if [ -n "$sarif_report" ]; then
            echo "SARIF report generated successfully"
            sarif_high_count=$(echo "$sarif_report" | grep -o '"level":"error"' | wc -l)
            sarif_medium_count=$(echo "$sarif_report" | grep -o '"level":"warning"' | wc -l)
            echo "SARIF results: errorLevel=$sarif_high_count warningLevel=$sarif_medium_count"
          fi
          
          echo "rapidast result: riskHigh=$high_count riskMedium=$medium_count"
          if [ "$high_count" -gt 0 ]; then
            echo "High risk alert, please check the scan result report"
            exit 1
          fi
        image: quay.io/redhatproductsecurity/rapidast:latest
        imagePullPolicy: Always
        name: rapidast-chart
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        securityContext:
          privileged: true
          capabilities:
            add:
              - SYS_ADMIN
        env:
        - name: _JAVA_OPTIONS
          value: "-DmaxYamlCodePoints=99999999"
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /helm/config
          name: config-volume
        - mountPath: /opt/rapidast/results/
          name: results-volume
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: rapidast-configmap
        name: config-volume
      - name: results-volume
        persistentVolumeClaim:
          claimName: rapidast-pvc
